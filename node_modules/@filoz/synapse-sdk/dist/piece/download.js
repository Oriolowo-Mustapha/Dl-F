import { asPieceCID, createPieceCIDStream } from "./index.js";
export async function downloadAndValidate(response, expectedPieceCid) {
    const parsedPieceCid = asPieceCID(expectedPieceCid);
    if (parsedPieceCid == null) {
        throw new Error(`Invalid PieceCID: ${String(expectedPieceCid)}`);
    }
    if (!response.ok) {
        throw new Error(`Download failed: ${response.status} ${response.statusText}`);
    }
    if (response.body == null) {
        throw new Error('Response body is null');
    }
    const { stream: pieceCidStream, getPieceCID } = createPieceCIDStream();
    const chunks = [];
    const collectStream = new TransformStream({
        transform(chunk, controller) {
            chunks.push(chunk);
            controller.enqueue(chunk);
        },
    });
    const pipelineStream = response.body.pipeThrough(pieceCidStream).pipeThrough(collectStream);
    const reader = pipelineStream.getReader();
    try {
        while (true) {
            const { done } = await reader.read();
            if (done)
                break;
        }
    }
    finally {
        reader.releaseLock();
    }
    if (chunks.length === 0) {
        throw new Error('Response body is null');
    }
    const calculatedPieceCid = getPieceCID();
    if (calculatedPieceCid == null) {
        throw new Error('Failed to calculate PieceCID from stream');
    }
    if (calculatedPieceCid.toString() !== parsedPieceCid.toString()) {
        throw new Error(`PieceCID verification failed. Expected: ${String(parsedPieceCid)}, Got: ${String(calculatedPieceCid)}`);
    }
    const totalLength = chunks.reduce((acc, chunk) => acc + chunk.length, 0);
    const result = new Uint8Array(totalLength);
    let offset = 0;
    for (const chunk of chunks) {
        result.set(chunk, offset);
        offset += chunk.length;
    }
    return result;
}
export async function downloadAndValidateFromUrl(url, expectedPieceCid) {
    const response = await fetch(url);
    return await downloadAndValidate(response, expectedPieceCid);
}
//# sourceMappingURL=download.js.map
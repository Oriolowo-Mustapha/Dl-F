import { ethers } from 'ethers';
import { PaymentsService } from './payments/index.ts';
import type { StorageService } from './storage/index.ts';
import { StorageManager } from './storage/manager.ts';
import type { FilecoinNetworkType, PieceCID, ProviderInfo, StorageInfo, StorageServiceOptions, SynapseOptions } from './types.ts';
export declare class Synapse {
    private readonly _signer;
    private readonly _network;
    private readonly _withCDN;
    private readonly _payments;
    private readonly _provider;
    private readonly _warmStorageAddress;
    private readonly _warmStorageService;
    private readonly _pieceRetriever;
    private readonly _storageManager;
    static create(options: SynapseOptions): Promise<Synapse>;
    private constructor();
    getNetwork(): FilecoinNetworkType;
    getSigner(): ethers.Signer;
    getProvider(): ethers.Provider;
    getChainId(): number;
    getWarmStorageAddress(): string;
    getPaymentsAddress(): string;
    getPDPVerifierAddress(): string;
    get payments(): PaymentsService;
    get storage(): StorageManager;
    createStorage(options?: StorageServiceOptions): Promise<StorageService>;
    download(pieceCid: string | PieceCID, options?: {
        providerAddress?: string;
        withCDN?: boolean;
    }): Promise<Uint8Array>;
    getProviderInfo(providerAddress: string | number): Promise<ProviderInfo>;
    getStorageInfo(): Promise<StorageInfo>;
}
//# sourceMappingURL=synapse.d.ts.map
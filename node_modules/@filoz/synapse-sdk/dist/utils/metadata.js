import { METADATA_KEYS } from "./constants.js";
export const METADATA_LIMITS = {
    MAX_KEY_LENGTH: 32,
    MAX_VALUE_LENGTH: 128,
    MAX_KEYS_PER_DATASET: 10,
    MAX_KEYS_PER_PIECE: 5,
};
export function objectToEntries(metadata) {
    return Object.entries(metadata)
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([key, value]) => ({ key, value }));
}
export function entriesToObject(entries) {
    const obj = Object.create(null);
    for (const { key, value } of entries) {
        obj[key] = value;
    }
    return obj;
}
export function validateDataSetMetadata(metadata) {
    const metadataArray = Array.isArray(metadata) ? metadata : objectToEntries(metadata);
    if (metadataArray.length > METADATA_LIMITS.MAX_KEYS_PER_DATASET) {
        throw new Error(`Too many metadata keys for data set: ${metadataArray.length} (max: ${METADATA_LIMITS.MAX_KEYS_PER_DATASET})`);
    }
    for (const { key, value } of metadataArray) {
        if (key.length > METADATA_LIMITS.MAX_KEY_LENGTH) {
            throw new Error(`Metadata key "${key}" exceeds max length: ${key.length} bytes (max: ${METADATA_LIMITS.MAX_KEY_LENGTH})`);
        }
        if (value.length > METADATA_LIMITS.MAX_VALUE_LENGTH) {
            throw new Error(`Metadata value for key "${key}" exceeds max length: ${value.length} bytes (max: ${METADATA_LIMITS.MAX_VALUE_LENGTH})`);
        }
    }
}
export function validatePieceMetadata(metadata) {
    const metadataArray = Array.isArray(metadata) ? metadata : objectToEntries(metadata);
    if (metadataArray.length > METADATA_LIMITS.MAX_KEYS_PER_PIECE) {
        throw new Error(`Too many metadata keys for piece: ${metadataArray.length} (max: ${METADATA_LIMITS.MAX_KEYS_PER_PIECE})`);
    }
    for (const { key, value } of metadataArray) {
        if (key.length > METADATA_LIMITS.MAX_KEY_LENGTH) {
            throw new Error(`Metadata key "${key}" exceeds max length: ${key.length} bytes (max: ${METADATA_LIMITS.MAX_KEY_LENGTH})`);
        }
        if (value.length > METADATA_LIMITS.MAX_VALUE_LENGTH) {
            throw new Error(`Metadata value for key "${key}" exceeds max length: ${value.length} bytes (max: ${METADATA_LIMITS.MAX_VALUE_LENGTH})`);
        }
    }
}
export function metadataMatches(dataSetMetadata, requestedMetadata) {
    const dataSetKeys = Object.keys(dataSetMetadata);
    const requestedKeys = Object.keys(requestedMetadata);
    if (dataSetKeys.length !== requestedKeys.length) {
        return false;
    }
    if (requestedKeys.length === 0) {
        return true;
    }
    for (const key of requestedKeys) {
        if (dataSetMetadata[key] !== requestedMetadata[key]) {
            return false;
        }
    }
    return true;
}
export function combineMetadata(metadata = {}, withCDN) {
    if (withCDN == null || METADATA_KEYS.WITH_CDN in metadata) {
        return metadata;
    }
    if (withCDN) {
        return { ...metadata, [METADATA_KEYS.WITH_CDN]: '' };
    }
    return metadata;
}
export function withCDNToMetadata(withCDN) {
    if (withCDN) {
        return [{ key: METADATA_KEYS.WITH_CDN, value: '' }];
    }
    return [];
}
//# sourceMappingURL=metadata.js.map
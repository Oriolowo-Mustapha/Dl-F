export interface PDPMockOptions {
    baseUrl?: string;
    debug?: boolean;
}
export interface MetadataCapture {
    keys: string[];
    values: string[];
}
export interface PieceMetadataCapture {
    keys: string[][];
    values: string[][];
}
export declare function createDataSetHandler(txHash: string, options?: PDPMockOptions): import("msw").HttpHandler;
export declare function addPiecesHandler(dataSetId: number, txHash: string, options?: PDPMockOptions): import("msw").HttpHandler;
export declare function dataSetCreationStatusHandler(txHash: string, response: {
    ok: boolean | null;
    dataSetId?: number;
}, options?: PDPMockOptions): import("msw").HttpHandler;
export declare function pieceAdditionStatusHandler(dataSetId: number, txHash: string, response: any, options?: PDPMockOptions): import("msw").HttpHandler;
export declare function findPieceHandler(pieceCid: string, found: boolean, options?: PDPMockOptions): import("msw").HttpHandler;
export declare function decodeMetadataFromExtraData(extraData: string): MetadataCapture;
export declare function decodePieceMetadataFromExtraData(extraData: string): PieceMetadataCapture;
export declare function createDataSetWithMetadataCapture(txHash: string, captureCallback: (metadata: MetadataCapture) => void, options?: PDPMockOptions): import("msw").HttpHandler;
export declare function addPiecesWithMetadataCapture(dataSetId: number, txHash: string, captureCallback: (metadata: PieceMetadataCapture) => void, options?: PDPMockOptions): import("msw").HttpHandler;
//# sourceMappingURL=handlers.d.ts.map
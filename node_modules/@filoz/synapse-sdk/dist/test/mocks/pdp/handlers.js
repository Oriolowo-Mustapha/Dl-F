import { ethers } from 'ethers';
import { HttpResponse, http } from 'msw';
export function createDataSetHandler(txHash, options = {}) {
    const baseUrl = options.baseUrl ?? 'http://pdp.local';
    return http.post(`${baseUrl}/pdp/data-sets`, async ({ request }) => {
        if (options.debug) {
            const body = await request.json();
            console.debug('PDP Mock: createDataSet request', body);
        }
        const body = (await request.json());
        if (!body.extraData) {
            return new HttpResponse(JSON.stringify({ error: 'Missing extraData' }), { status: 400 });
        }
        try {
            const abiCoder = ethers.AbiCoder.defaultAbiCoder();
            const decoded = abiCoder.decode(['address', 'string[]', 'string[]', 'bytes'], body.extraData);
            if (options.debug) {
                console.debug('PDP Mock: decoded metadata keys', decoded[1]);
                console.debug('PDP Mock: decoded metadata values', decoded[2]);
            }
        }
        catch (error) {
            if (options.debug) {
                console.debug('PDP Mock: failed to decode extraData', error);
            }
        }
        return new HttpResponse(null, {
            status: 201,
            headers: { Location: `/pdp/data-sets/created/${txHash}` },
        });
    });
}
export function addPiecesHandler(dataSetId, txHash, options = {}) {
    const baseUrl = options.baseUrl ?? 'http://pdp.local';
    return http.post(`${baseUrl}/pdp/data-sets/:id/pieces`, async ({ params, request }) => {
        if (params.id !== dataSetId.toString()) {
            return new HttpResponse(null, { status: 404 });
        }
        const body = await request.json();
        if (options.debug) {
            console.debug('PDP Mock: addPieces request', body);
        }
        if (!body.extraData) {
            return new HttpResponse(JSON.stringify({ error: 'Missing extraData' }), { status: 400 });
        }
        try {
            const abiCoder = ethers.AbiCoder.defaultAbiCoder();
            const decoded = abiCoder.decode(['bytes', 'string[][]', 'string[][]'], body.extraData);
            if (options.debug) {
                console.debug('PDP Mock: decoded piece metadata', decoded[1]);
                console.debug('PDP Mock: decoded piece metadata values', decoded[2]);
            }
        }
        catch (error) {
            if (options.debug) {
                console.debug('PDP Mock: failed to decode extraData', error);
            }
        }
        return new HttpResponse(null, {
            status: 201,
            headers: { Location: `/pdp/data-sets/${dataSetId}/pieces/added/${txHash}` },
        });
    });
}
export function dataSetCreationStatusHandler(txHash, response, options = {}) {
    const baseUrl = options.baseUrl ?? 'http://pdp.local';
    return http.get(`${baseUrl}/pdp/data-sets/created/:txHash`, ({ params }) => {
        if (params.txHash !== txHash) {
            return new HttpResponse(null, { status: 404 });
        }
        return HttpResponse.json(response, { status: 200 });
    });
}
export function pieceAdditionStatusHandler(dataSetId, txHash, response, options = {}) {
    const baseUrl = options.baseUrl ?? 'http://pdp.local';
    return http.get(`${baseUrl}/pdp/data-sets/:id/pieces/added/:txHash`, ({ params }) => {
        if (params.id !== dataSetId.toString() || params.txHash !== txHash) {
            return new HttpResponse(null, { status: 404 });
        }
        return HttpResponse.json(response, { status: 200 });
    });
}
export function findPieceHandler(pieceCid, found, options = {}) {
    const baseUrl = options.baseUrl ?? 'http://pdp.local';
    return http.get(`${baseUrl}/pdp/piece/`, ({ request }) => {
        const url = new URL(request.url);
        const queryCid = url.searchParams.get('pieceCid');
        if (queryCid !== pieceCid) {
            return HttpResponse.json({ pieceCid: null }, { status: 200 });
        }
        if (!found) {
            return HttpResponse.json({ pieceCid: null }, { status: 200 });
        }
        return HttpResponse.json({ pieceCid }, { status: 200 });
    });
}
export function decodeMetadataFromExtraData(extraData) {
    const abiCoder = ethers.AbiCoder.defaultAbiCoder();
    const decoded = abiCoder.decode(['address', 'string[]', 'string[]', 'bytes'], extraData);
    return {
        keys: decoded[1],
        values: decoded[2],
    };
}
export function decodePieceMetadataFromExtraData(extraData) {
    const abiCoder = ethers.AbiCoder.defaultAbiCoder();
    const decoded = abiCoder.decode(['bytes', 'string[][]', 'string[][]'], extraData);
    return {
        keys: decoded[1],
        values: decoded[2],
    };
}
export function createDataSetWithMetadataCapture(txHash, captureCallback, options = {}) {
    const baseUrl = options.baseUrl ?? 'http://pdp.local';
    return http.post(`${baseUrl}/pdp/data-sets`, async ({ request }) => {
        const body = (await request.json());
        if (!body.extraData) {
            return new HttpResponse(JSON.stringify({ error: 'Missing extraData' }), { status: 400 });
        }
        try {
            const metadata = decodeMetadataFromExtraData(body.extraData);
            captureCallback(metadata);
            if (options.debug) {
                console.debug('PDP Mock: captured metadata', metadata);
            }
        }
        catch (error) {
            if (options.debug) {
                console.debug('PDP Mock: failed to decode extraData', error);
            }
        }
        return new HttpResponse(null, {
            status: 201,
            headers: { Location: `/pdp/data-sets/created/${txHash}` },
        });
    });
}
export function addPiecesWithMetadataCapture(dataSetId, txHash, captureCallback, options = {}) {
    const baseUrl = options.baseUrl ?? 'http://pdp.local';
    return http.post(`${baseUrl}/pdp/data-sets/:id/pieces`, async ({ params, request }) => {
        if (params.id !== dataSetId.toString()) {
            return new HttpResponse(null, { status: 404 });
        }
        const body = await request.json();
        if (!body.extraData) {
            return new HttpResponse(JSON.stringify({ error: 'Missing extraData' }), { status: 400 });
        }
        try {
            const metadata = decodePieceMetadataFromExtraData(body.extraData);
            captureCallback(metadata);
            if (options.debug) {
                console.debug('PDP Mock: captured piece metadata', metadata);
            }
        }
        catch (error) {
            if (options.debug) {
                console.debug('PDP Mock: failed to decode extraData', error);
            }
        }
        return new HttpResponse(null, {
            status: 201,
            headers: { Location: `/pdp/data-sets/${dataSetId}/pieces/added/${txHash}` },
        });
    });
}
//# sourceMappingURL=handlers.js.map
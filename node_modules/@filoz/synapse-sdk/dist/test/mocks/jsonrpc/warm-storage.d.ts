import type { ExtractAbiFunction } from 'abitype';
import { type Hex } from 'viem';
import { CONTRACT_ABIS } from '../../../utils/constants.ts';
import type { AbiToType, JSONRPCOptions } from './types.ts';
export type isProviderApproved = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE_VIEW, 'isProviderApproved'>;
export type railToDataSet = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE_VIEW, 'railToDataSet'>;
export type getClientDataSets = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE_VIEW, 'getClientDataSets'>;
export type getApprovedProviders = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE_VIEW, 'getApprovedProviders'>;
export type getAllDataSetMetadata = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE_VIEW, 'getAllDataSetMetadata'>;
export type getDataSetMetadata = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE_VIEW, 'getDataSetMetadata'>;
export type getAllPieceMetadata = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE_VIEW, 'getAllPieceMetadata'>;
export type getPieceMetadata = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE_VIEW, 'getPieceMetadata'>;
export interface WarmStorageViewOptions {
    isProviderApproved?: (args: AbiToType<isProviderApproved['inputs']>) => AbiToType<isProviderApproved['outputs']>;
    getClientDataSets?: (args: AbiToType<getClientDataSets['inputs']>) => AbiToType<getClientDataSets['outputs']>;
    railToDataSet?: (args: AbiToType<railToDataSet['inputs']>) => AbiToType<railToDataSet['outputs']>;
    getApprovedProviders?: (args: AbiToType<getApprovedProviders['inputs']>) => AbiToType<getApprovedProviders['outputs']>;
    getAllDataSetMetadata?: (args: AbiToType<getAllDataSetMetadata['inputs']>) => AbiToType<getAllDataSetMetadata['outputs']>;
    getDataSetMetadata?: (args: AbiToType<getDataSetMetadata['inputs']>) => AbiToType<getDataSetMetadata['outputs']>;
    getAllPieceMetadata?: (args: AbiToType<getAllPieceMetadata['inputs']>) => AbiToType<getAllPieceMetadata['outputs']>;
    getPieceMetadata?: (args: AbiToType<getPieceMetadata['inputs']>) => AbiToType<getPieceMetadata['outputs']>;
}
export type pdpVerifierAddress = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE, 'pdpVerifierAddress'>;
export type paymentsContractAddress = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE, 'paymentsContractAddress'>;
export type usdfcTokenAddress = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE, 'usdfcTokenAddress'>;
export type filCDNBeneficiaryAddress = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE, 'filCDNBeneficiaryAddress'>;
export type viewContractAddress = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE, 'viewContractAddress'>;
export type serviceProviderRegistry = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE, 'serviceProviderRegistry'>;
export type getServicePrice = ExtractAbiFunction<typeof CONTRACT_ABIS.WARM_STORAGE, 'getServicePrice'>;
export interface WarmStorageOptions {
    pdpVerifierAddress?: (args: AbiToType<pdpVerifierAddress['inputs']>) => AbiToType<pdpVerifierAddress['outputs']>;
    paymentsContractAddress?: (args: AbiToType<paymentsContractAddress['inputs']>) => AbiToType<paymentsContractAddress['outputs']>;
    usdfcTokenAddress?: (args: AbiToType<usdfcTokenAddress['inputs']>) => AbiToType<usdfcTokenAddress['outputs']>;
    filCDNBeneficiaryAddress?: (args: AbiToType<filCDNBeneficiaryAddress['inputs']>) => AbiToType<filCDNBeneficiaryAddress['outputs']>;
    viewContractAddress?: (args: AbiToType<viewContractAddress['inputs']>) => AbiToType<viewContractAddress['outputs']>;
    serviceProviderRegistry?: (args: AbiToType<serviceProviderRegistry['inputs']>) => AbiToType<serviceProviderRegistry['outputs']>;
    getServicePrice?: (args: AbiToType<getServicePrice['inputs']>) => AbiToType<getServicePrice['outputs']>;
}
export declare function warmStorageCallHandler(data: Hex, options: JSONRPCOptions): Hex;
export declare function warmStorageViewCallHandler(data: Hex, options: JSONRPCOptions): Hex;
//# sourceMappingURL=warm-storage.d.ts.map
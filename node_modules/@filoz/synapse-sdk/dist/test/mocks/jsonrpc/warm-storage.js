import { decodeFunctionData, encodeAbiParameters } from 'viem';
import { CONTRACT_ABIS } from "../../../utils/constants.js";
export function warmStorageCallHandler(data, options) {
    const { functionName, args } = decodeFunctionData({
        abi: CONTRACT_ABIS.WARM_STORAGE,
        data: data,
    });
    if (options.debug) {
        console.debug('Warm Storage: calling function', functionName, 'with args', args);
    }
    switch (functionName) {
        case 'pdpVerifierAddress': {
            if (!options.warmStorage?.pdpVerifierAddress) {
                throw new Error('Warm Storage: pdpVerifierAddress is not defined');
            }
            return encodeAbiParameters([{ name: '', internalType: 'address', type: 'address' }], options.warmStorage.pdpVerifierAddress(args));
        }
        case 'paymentsContractAddress': {
            if (!options.warmStorage?.paymentsContractAddress) {
                throw new Error('Warm Storage: paymentsContractAddress is not defined');
            }
            return encodeAbiParameters([{ name: '', internalType: 'address', type: 'address' }], options.warmStorage.paymentsContractAddress(args));
        }
        case 'usdfcTokenAddress': {
            if (!options.warmStorage?.usdfcTokenAddress) {
                throw new Error('Warm Storage: usdfcTokenAddress is not defined');
            }
            return encodeAbiParameters([{ name: '', internalType: 'address', type: 'address' }], options.warmStorage.usdfcTokenAddress(args));
        }
        case 'filCDNBeneficiaryAddress': {
            if (!options.warmStorage?.filCDNBeneficiaryAddress) {
                throw new Error('Warm Storage: filCDNBeneficiaryAddress is not defined');
            }
            return encodeAbiParameters([{ name: '', internalType: 'address', type: 'address' }], options.warmStorage.filCDNBeneficiaryAddress(args));
        }
        case 'viewContractAddress': {
            if (!options.warmStorage?.viewContractAddress) {
                throw new Error('Warm Storage: viewContractAddress is not defined');
            }
            return encodeAbiParameters([{ name: '', internalType: 'address', type: 'address' }], options.warmStorage.viewContractAddress(args));
        }
        case 'serviceProviderRegistry': {
            if (!options.warmStorage?.serviceProviderRegistry) {
                throw new Error('Warm Storage: serviceProviderRegistry is not defined');
            }
            return encodeAbiParameters([{ name: '', internalType: 'address', type: 'address' }], options.warmStorage.serviceProviderRegistry(args));
        }
        case 'getServicePrice': {
            if (!options.warmStorage?.getServicePrice) {
                throw new Error('Warm Storage: getServicePrice is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE.find((abi) => abi.type === 'function' && abi.name === 'getServicePrice').outputs, options.warmStorage.getServicePrice(args));
        }
        default: {
            throw new Error(`Warm Storage: unknown function: ${functionName} with args: ${args}`);
        }
    }
}
export function warmStorageViewCallHandler(data, options) {
    const { functionName, args } = decodeFunctionData({
        abi: CONTRACT_ABIS.WARM_STORAGE_VIEW,
        data: data,
    });
    if (options.debug) {
        console.debug('Warm Storage View: calling function', functionName, 'with args', args);
    }
    switch (functionName) {
        case 'isProviderApproved': {
            if (!options.warmStorageView?.isProviderApproved) {
                throw new Error('Warm Storage View: isProviderApproved is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE_VIEW.find((abi) => abi.type === 'function' && abi.name === 'isProviderApproved')
                .outputs, options.warmStorageView.isProviderApproved(args));
        }
        case 'getClientDataSets': {
            if (!options.warmStorageView?.getClientDataSets) {
                throw new Error('Warm Storage View: getClientDataSets is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE_VIEW.find((abi) => abi.type === 'function' && abi.name === 'getClientDataSets')
                .outputs, options.warmStorageView.getClientDataSets(args));
        }
        case 'railToDataSet': {
            if (!options.warmStorageView?.railToDataSet) {
                throw new Error('Warm Storage View: railToDataSet is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE_VIEW.find((abi) => abi.type === 'function' && abi.name === 'railToDataSet').outputs, options.warmStorageView.railToDataSet(args));
        }
        case 'getApprovedProviders': {
            if (!options.warmStorageView?.getApprovedProviders) {
                throw new Error('Warm Storage View: getApprovedProviders is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE_VIEW.find((abi) => abi.type === 'function' && abi.name === 'getApprovedProviders')
                .outputs, options.warmStorageView.getApprovedProviders(args));
        }
        case 'getAllDataSetMetadata': {
            if (!options.warmStorageView?.getAllDataSetMetadata) {
                throw new Error('Warm Storage View: getAllDataSetMetadata is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE_VIEW.find((abi) => abi.type === 'function' && abi.name === 'getAllDataSetMetadata')
                .outputs, options.warmStorageView.getAllDataSetMetadata(args));
        }
        case 'getDataSetMetadata': {
            if (!options.warmStorageView?.getDataSetMetadata) {
                throw new Error('Warm Storage View: getDataSetMetadata is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE_VIEW.find((abi) => abi.type === 'function' && abi.name === 'getDataSetMetadata')
                .outputs, options.warmStorageView.getDataSetMetadata(args));
        }
        case 'getAllPieceMetadata': {
            if (!options.warmStorageView?.getAllPieceMetadata) {
                throw new Error('Warm Storage View: getAllPieceMetadata is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE_VIEW.find((abi) => abi.type === 'function' && abi.name === 'getAllPieceMetadata')
                .outputs, options.warmStorageView.getAllPieceMetadata(args));
        }
        case 'getPieceMetadata': {
            if (!options.warmStorageView?.getPieceMetadata) {
                throw new Error('Warm Storage View: getPieceMetadata is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.WARM_STORAGE_VIEW.find((abi) => abi.type === 'function' && abi.name === 'getPieceMetadata')
                .outputs, options.warmStorageView.getPieceMetadata(args));
        }
        default: {
            throw new Error(`Warm Storage View: unknown function: ${functionName} with args: ${args}`);
        }
    }
}
//# sourceMappingURL=warm-storage.js.map
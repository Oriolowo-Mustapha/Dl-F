import { decodeFunctionData, encodeAbiParameters } from 'viem';
import { CONTRACT_ABIS } from "../../../utils/constants.js";
export function serviceProviderRegistryCallHandler(data, options) {
    const { functionName, args } = decodeFunctionData({
        abi: CONTRACT_ABIS.SERVICE_PROVIDER_REGISTRY,
        data: data,
    });
    if (options.debug) {
        console.debug('Service Provider Registry: calling function', functionName, 'with args', args);
    }
    switch (functionName) {
        case 'getProviderByAddress': {
            if (!options.serviceRegistry?.getProviderByAddress) {
                throw new Error('Service Provider Registry: getProviderByAddress is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.SERVICE_PROVIDER_REGISTRY.find((abi) => abi.type === 'function' && abi.name === 'getProviderByAddress').outputs, options.serviceRegistry.getProviderByAddress(args));
        }
        case 'getProviderIdByAddress': {
            if (!options.serviceRegistry?.getProviderIdByAddress) {
                throw new Error('Service Provider Registry: getProviderIdByAddress is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.SERVICE_PROVIDER_REGISTRY.find((abi) => abi.type === 'function' && abi.name === 'getProviderIdByAddress').outputs, options.serviceRegistry.getProviderIdByAddress(args));
        }
        case 'getPDPService': {
            if (!options.serviceRegistry?.getPDPService) {
                throw new Error('Service Provider Registry: getPDPService is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.SERVICE_PROVIDER_REGISTRY.find((abi) => abi.type === 'function' && abi.name === 'getPDPService')
                .outputs, options.serviceRegistry.getPDPService(args));
        }
        case 'getProvider': {
            if (!options.serviceRegistry?.getProvider) {
                throw new Error('Service Provider Registry: getProvider is not defined');
            }
            return encodeAbiParameters(CONTRACT_ABIS.SERVICE_PROVIDER_REGISTRY.find((abi) => abi.type === 'function' && abi.name === 'getProvider')
                .outputs, options.serviceRegistry.getProvider(args));
        }
        default: {
            throw new Error(`Service Provider Registry: unknown function: ${functionName} with args: ${args}`);
        }
    }
}
//# sourceMappingURL=service-registry.js.map
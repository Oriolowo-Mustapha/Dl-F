import { assert } from 'chai';
import { ethers } from 'ethers';
import { PDPVerifier } from "../pdp/index.js";
import { createMockProvider } from "./test-utils.js";
describe('PDPVerifier', () => {
    let mockProvider;
    let pdpVerifier;
    const testAddress = '0x5A23b7df87f59A291C26A2A1d684AD03Ce9B68DC';
    beforeEach(() => {
        mockProvider = createMockProvider();
        pdpVerifier = new PDPVerifier(mockProvider, testAddress);
    });
    describe('Instantiation', () => {
        it('should create instance and connect provider', () => {
            assert.exists(pdpVerifier);
            assert.isFunction(pdpVerifier.dataSetLive);
            assert.isFunction(pdpVerifier.getNextPieceId);
        });
        it('should create instance with custom address', () => {
            const customAddress = '0x1234567890123456789012345678901234567890';
            const customVerifier = new PDPVerifier(mockProvider, customAddress);
            assert.exists(customVerifier);
            assert.isFunction(customVerifier.dataSetLive);
            assert.isFunction(customVerifier.getNextPieceId);
        });
    });
    describe('dataSetLive', () => {
        it('should check if data set is live', async () => {
            mockProvider.call = async (transaction) => {
                const data = transaction.data;
                if (data?.startsWith('0xca759f27') === true) {
                    return ethers.zeroPadValue('0x01', 32);
                }
                return `0x${'0'.repeat(64)}`;
            };
            const isLive = await pdpVerifier.dataSetLive(123);
            assert.isTrue(isLive);
        });
    });
    describe('getNextPieceId', () => {
        it('should get next piece ID', async () => {
            mockProvider.call = async (transaction) => {
                const data = transaction.data;
                if (data?.startsWith('0x1c5ae80f') === true) {
                    return ethers.zeroPadValue('0x05', 32);
                }
                return `0x${'0'.repeat(64)}`;
            };
            const nextPieceId = await pdpVerifier.getNextPieceId(123);
            assert.equal(nextPieceId, 5);
        });
    });
    describe('getDataSetListener', () => {
        it('should get data set listener', async () => {
            const listenerAddress = '0x1234567890123456789012345678901234567890';
            mockProvider.call = async (transaction) => {
                const data = transaction.data;
                if (data?.startsWith('0x2b3129bb') === true) {
                    return ethers.zeroPadValue(listenerAddress, 32);
                }
                return `0x${'0'.repeat(64)}`;
            };
            const listener = await pdpVerifier.getDataSetListener(123);
            assert.equal(listener.toLowerCase(), listenerAddress.toLowerCase());
        });
    });
    describe('getDataSetStorageProvider', () => {
        it('should get data set storage provider', async () => {
            const storageProvider = '0x1234567890123456789012345678901234567890';
            const proposedStorageProvider = '0xabcdef1234567890123456789012345678901234';
            mockProvider.call = async (transaction) => {
                const data = transaction.data;
                if (data?.startsWith('0x21b7cd1c') === true) {
                    return ethers.AbiCoder.defaultAbiCoder().encode(['address', 'address'], [storageProvider, proposedStorageProvider]);
                }
                return `0x${'0'.repeat(64)}`;
            };
            const result = await pdpVerifier.getDataSetStorageProvider(123);
            assert.equal(result.storageProvider.toLowerCase(), storageProvider.toLowerCase());
            assert.equal(result.proposedStorageProvider.toLowerCase(), proposedStorageProvider.toLowerCase());
        });
    });
    describe('getDataSetLeafCount', () => {
        it('should get data set leaf count', async () => {
            mockProvider.call = async (transaction) => {
                const data = transaction.data;
                if (data?.startsWith('0xa531998c') === true) {
                    return ethers.zeroPadValue('0x0a', 32);
                }
                return `0x${'0'.repeat(64)}`;
            };
            const leafCount = await pdpVerifier.getDataSetLeafCount(123);
            assert.equal(leafCount, 10);
        });
    });
    describe('extractDataSetIdFromReceipt', () => {
        it('should extract data set ID from receipt', () => {
            const mockReceipt = {
                logs: [
                    {
                        topics: [
                            '0x1234567890123456789012345678901234567890123456789012345678901234',
                            ethers.zeroPadValue('0x7b', 32),
                        ],
                        data: `0x${'0'.repeat(64)}`,
                    },
                ],
            };
            pdpVerifier._contract.interface.parseLog = (log) => {
                if (log.topics[0] === '0x1234567890123456789012345678901234567890123456789012345678901234') {
                    return {
                        name: 'DataSetCreated',
                        args: {
                            setId: BigInt(123),
                        },
                        fragment: {},
                        signature: 'DataSetCreated(uint256)',
                        topic: log.topics[0],
                    };
                }
                return null;
            };
            const dataSetId = pdpVerifier.extractDataSetIdFromReceipt(mockReceipt);
            assert.equal(dataSetId, 123);
        });
        it('should return null if no DataSetCreated event found', () => {
            const mockReceipt = {
                logs: [],
            };
            const dataSetId = pdpVerifier.extractDataSetIdFromReceipt(mockReceipt);
            assert.isNull(dataSetId);
        });
    });
    describe('getContractAddress', () => {
        it('should return the contract address', () => {
            const address = pdpVerifier.getContractAddress();
            assert.equal(address, testAddress);
        });
    });
});
//# sourceMappingURL=pdp-verifier.test.js.map
import { ethers } from 'ethers';
import type { SPRegistryService } from '../sp-registry/index.ts';
import type { ProviderInfo } from '../sp-registry/types.ts';
import { ProviderResolver } from '../utils/provider-resolver.ts';
export declare const MOCK_ADDRESSES: {
    PAYMENTS: "0x80Df863d84eFaa0aaC8da2E9B08D14A7236ff4D0";
    PDP_VERIFIER: "0x3ce3C62C4D405d69738530A6A65E4b13E8700C48";
    SIGNER: "0x1234567890123456789012345678901234567890";
    WARM_STORAGE: "0xEB022abbaa66D9F459F3EC2FeCF81a6D03c2Cb6F";
    WARM_STORAGE_VIEW: "0x1996B60838871D0bc7980Bc02DD6Eb920535bE54";
};
export declare function createMockSigner(address?: string, provider?: any): ethers.Signer;
export declare function createMockProvider(chainId?: number): ethers.Provider;
export declare function extendMockProviderCall(provider: ethers.Provider, customMockFn: (transaction: any) => Promise<string | null>): () => void;
export declare function createViewContractAddressMock(viewAddress?: string): (data: string | undefined) => string | null;
export declare function createCustomMulticall3Mock(provider: ethers.Provider, customAddresses?: Partial<{
    pdpVerifier?: string;
    payments?: string;
    usdfcToken?: string;
    filCDN?: string;
    viewContract?: string;
    spRegistry?: string;
}>): () => void;
export declare function createMockSPRegistryService(providers?: ProviderInfo[]): SPRegistryService;
export declare function createMockProviderResolver(approvedIds: number[], providers?: ProviderInfo[]): ProviderResolver;
export declare function setupProviderRegistryMocks(provider: ethers.Provider, options?: {
    approvedIds?: number[];
    providers?: ProviderInfo[];
    throwOnApproval?: boolean;
}): () => void;
export declare function createMockProviderInfo(overrides?: Partial<ProviderInfo>): ProviderInfo;
export declare function createSimpleProvider(props: {
    address?: string;
    serviceProvider?: string;
    serviceURL: string;
}): ProviderInfo;
//# sourceMappingURL=test-utils.d.ts.map
import { ethers } from 'ethers';
import type { PDPOffering, PDPServiceInfo, ProductType, ProviderInfo, ProviderRegistrationInfo } from './types.ts';
export declare class SPRegistryService {
    private readonly _provider;
    private readonly _registryAddress;
    private _registryContract;
    constructor(provider: ethers.Provider, registryAddress: string);
    static create(provider: ethers.Provider, registryAddress: string): Promise<SPRegistryService>;
    private _getRegistryContract;
    registerProvider(signer: ethers.Signer, info: ProviderRegistrationInfo): Promise<ethers.TransactionResponse>;
    updateProviderInfo(signer: ethers.Signer, name: string, description: string): Promise<ethers.TransactionResponse>;
    removeProvider(signer: ethers.Signer): Promise<ethers.TransactionResponse>;
    getProvider(providerId: number): Promise<ProviderInfo | null>;
    getProviderByAddress(address: string): Promise<ProviderInfo | null>;
    getProviderIdByAddress(address: string): Promise<number>;
    getAllActiveProviders(): Promise<ProviderInfo[]>;
    getActiveProvidersByProductType(productType: ProductType): Promise<ProviderInfo[]>;
    isProviderActive(providerId: number): Promise<boolean>;
    isRegisteredProvider(address: string): Promise<boolean>;
    getProviderCount(): Promise<number>;
    activeProviderCount(): Promise<number>;
    addPDPProduct(signer: ethers.Signer, pdpOffering: PDPOffering, capabilities?: Record<string, string>): Promise<ethers.TransactionResponse>;
    updatePDPProduct(signer: ethers.Signer, pdpOffering: PDPOffering, capabilities?: Record<string, string>): Promise<ethers.TransactionResponse>;
    removeProduct(signer: ethers.Signer, productType: ProductType): Promise<ethers.TransactionResponse>;
    getPDPService(providerId: number): Promise<PDPServiceInfo | null>;
    providerHasProduct(providerId: number, productType: ProductType): Promise<boolean>;
    getProviders(providerIds: number[]): Promise<ProviderInfo[]>;
    private _getProvidersWithMulticall;
    private _prepareMulticallCalls;
    private _processMulticallResults;
    private _extractProductsFromMulticallResult;
    private _buildCapabilitiesFromKeys;
    private _getProvidersIndividually;
    private _getProviderProducts;
    private _convertToProviderInfo;
    private _convertCapabilitiesToObject;
    private encodePDPOffering;
}
//# sourceMappingURL=service.d.ts.map
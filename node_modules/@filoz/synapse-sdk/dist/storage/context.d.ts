import type { ethers } from 'ethers';
import type { PaymentsService } from '../payments/index.ts';
import type { ProviderInfo } from '../sp-registry/types.ts';
import type { Synapse } from '../synapse.ts';
import type { DownloadOptions, PieceCID, PieceStatus, PreflightInfo, StorageServiceOptions, UploadOptions, UploadResult } from '../types.ts';
import type { WarmStorageService } from '../warm-storage/index.ts';
export declare class StorageContext {
    private readonly _synapse;
    private readonly _provider;
    private readonly _pdpServer;
    private readonly _warmStorageService;
    private readonly _warmStorageAddress;
    private readonly _withCDN;
    private readonly _dataSetId;
    private readonly _signer;
    private readonly _uploadBatchSize;
    private readonly _dataSetMetadata;
    private _pendingPieces;
    private _isProcessing;
    readonly dataSetId: number;
    readonly serviceProvider: string;
    get withCDN(): boolean;
    get provider(): ProviderInfo;
    get dataSetMetadata(): Record<string, string>;
    private static validateRawSize;
    constructor(synapse: Synapse, warmStorageService: WarmStorageService, provider: ProviderInfo, dataSetId: number, options: StorageServiceOptions, dataSetMetadata: Record<string, string>);
    static create(synapse: Synapse, warmStorageService: WarmStorageService, options?: StorageServiceOptions): Promise<StorageContext>;
    private static createDataSet;
    private static resolveProviderAndDataSet;
    private static resolveByDataSetId;
    private static validateDataSetConsistency;
    private static resolveByProviderId;
    private static resolveByProviderAddress;
    private static smartSelectProvider;
    private static selectRandomProvider;
    private static selectProviderWithPing;
    static performPreflightCheck(warmStorageService: WarmStorageService, paymentsService: PaymentsService, size: number, withCDN: boolean): Promise<PreflightInfo>;
    preflightUpload(size: number): Promise<PreflightInfo>;
    upload(data: Uint8Array | ArrayBuffer, options?: UploadOptions): Promise<UploadResult>;
    private _processPendingPieces;
    download(pieceCid: string | PieceCID, options?: DownloadOptions): Promise<Uint8Array>;
    providerDownload(pieceCid: string | PieceCID, options?: DownloadOptions): Promise<Uint8Array>;
    getProviderInfo(): Promise<ProviderInfo>;
    getDataSetPieces(): Promise<PieceCID[]>;
    hasPiece(pieceCid: string | PieceCID): Promise<boolean>;
    pieceStatus(pieceCid: string | PieceCID): Promise<PieceStatus>;
    terminate(): Promise<ethers.TransactionResponse>;
}
//# sourceMappingURL=context.d.ts.map
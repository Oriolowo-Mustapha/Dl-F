import { ethers } from 'ethers';
import type { Synapse } from '../synapse.ts';
import type { DownloadOptions, EnhancedDataSetInfo, PieceCID, PieceRetriever, PreflightInfo, StorageCreationCallbacks, StorageInfo, StorageServiceOptions, UploadCallbacks, UploadResult } from '../types.ts';
import type { WarmStorageService } from '../warm-storage/index.ts';
import { StorageContext } from './context.ts';
type CombinedCallbacks = StorageCreationCallbacks & UploadCallbacks;
interface StorageManagerUploadOptions {
    context?: StorageContext;
    providerId?: number;
    providerAddress?: string;
    dataSetId?: number;
    withCDN?: boolean;
    forceCreateDataSet?: boolean;
    uploadBatchSize?: number;
    callbacks?: Partial<CombinedCallbacks>;
    metadata?: Record<string, string>;
}
interface StorageManagerDownloadOptions extends DownloadOptions {
    context?: StorageContext;
    providerAddress?: string;
    withCDN?: boolean;
}
export declare class StorageManager {
    private readonly _synapse;
    private readonly _warmStorageService;
    private readonly _pieceRetriever;
    private readonly _withCDN;
    private _defaultContext?;
    constructor(synapse: Synapse, warmStorageService: WarmStorageService, pieceRetriever: PieceRetriever, withCDN: boolean);
    upload(data: Uint8Array | ArrayBuffer, options?: StorageManagerUploadOptions): Promise<UploadResult>;
    download(pieceCid: string | PieceCID, options?: StorageManagerDownloadOptions): Promise<Uint8Array>;
    preflightUpload(size: number, options?: {
        withCDN?: boolean;
        metadata?: Record<string, string>;
    }): Promise<PreflightInfo>;
    createContext(options?: StorageServiceOptions): Promise<StorageContext>;
    getDefaultContext(): Promise<StorageContext>;
    findDataSets(clientAddress?: string): Promise<EnhancedDataSetInfo[]>;
    terminateDataSet(dataSetId: number): Promise<ethers.TransactionResponse>;
    getStorageInfo(): Promise<StorageInfo>;
}
export {};
//# sourceMappingURL=manager.d.ts.map
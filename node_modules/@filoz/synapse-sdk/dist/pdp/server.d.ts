import type { DataSetData, MetadataEntry, PieceCID } from '../types.ts';
import type { PDPAuthHelper } from './auth.ts';
export interface CreateDataSetResponse {
    txHash: string;
    statusUrl: string;
}
export interface DataSetCreationStatusResponse {
    createMessageHash: string;
    dataSetCreated: boolean;
    service: string;
    txStatus: string;
    ok: boolean | null;
    dataSetId?: number;
}
export interface AddPiecesResponse {
    message: string;
    txHash?: string;
    statusUrl?: string;
}
export interface FindPieceResponse {
    pieceCid: PieceCID;
    piece_cid?: string;
}
export interface UploadResponse {
    pieceCid: PieceCID;
    size: number;
}
export interface PieceAdditionStatusResponse {
    txHash: string;
    txStatus: string;
    dataSetId: number;
    pieceCount: number;
    addMessageOk: boolean | null;
    confirmedPieceIds?: number[];
}
export interface PDPAddPiecesInput {
    pieces: {
        pieceCid: string;
        subPieces: {
            subPieceCid: string;
        }[];
    }[];
    extraData: string;
}
export declare class PDPServer {
    private readonly _serviceURL;
    private readonly _authHelper;
    constructor(authHelper: PDPAuthHelper | null, serviceURL: string);
    createDataSet(clientDataSetId: number, payee: string, metadata: MetadataEntry[], recordKeeper: string): Promise<CreateDataSetResponse>;
    addPieces(dataSetId: number, clientDataSetId: number, nextPieceId: number, pieceDataArray: PieceCID[] | string[], metadata?: MetadataEntry[][]): Promise<AddPiecesResponse>;
    getDataSetCreationStatus(txHash: string): Promise<DataSetCreationStatusResponse>;
    getPieceAdditionStatus(dataSetId: number, txHash: string): Promise<PieceAdditionStatusResponse>;
    findPiece(pieceCid: string | PieceCID): Promise<FindPieceResponse>;
    uploadPiece(data: Uint8Array | ArrayBuffer): Promise<UploadResponse>;
    downloadPiece(pieceCid: string | PieceCID): Promise<Uint8Array>;
    getDataSet(dataSetId: number): Promise<DataSetData>;
    private _encodeDataSetCreateData;
    private _encodeAddPiecesExtraData;
    ping(): Promise<void>;
    getServiceURL(): string;
    getAuthHelper(): PDPAuthHelper;
}
//# sourceMappingURL=server.d.ts.map
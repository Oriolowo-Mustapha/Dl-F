import { asPieceCID } from "../piece/index.js";
export function isDataSetCreationStatusResponse(value) {
    if (typeof value !== 'object' || value == null) {
        return false;
    }
    const obj = value;
    if (typeof obj.createMessageHash !== 'string') {
        return false;
    }
    if (typeof obj.dataSetCreated !== 'boolean') {
        return false;
    }
    if (typeof obj.service !== 'string') {
        return false;
    }
    if (typeof obj.txStatus !== 'string') {
        return false;
    }
    if (obj.ok !== null && typeof obj.ok !== 'boolean') {
        return false;
    }
    if (obj.dataSetId !== undefined && typeof obj.dataSetId !== 'number') {
        return false;
    }
    return true;
}
export function isPieceAdditionStatusResponse(value) {
    if (typeof value !== 'object' || value == null) {
        return false;
    }
    const obj = value;
    if (typeof obj.txHash !== 'string') {
        return false;
    }
    if (typeof obj.txStatus !== 'string') {
        return false;
    }
    if (typeof obj.dataSetId !== 'number') {
        return false;
    }
    if (typeof obj.pieceCount !== 'number') {
        return false;
    }
    if (obj.addMessageOk !== null && typeof obj.addMessageOk !== 'boolean') {
        return false;
    }
    if (obj.confirmedPieceIds !== undefined) {
        if (!Array.isArray(obj.confirmedPieceIds)) {
            return false;
        }
        for (const id of obj.confirmedPieceIds) {
            if (typeof id !== 'number') {
                return false;
            }
        }
    }
    return true;
}
export function isFindPieceResponse(value) {
    if (typeof value !== 'object' || value == null) {
        return false;
    }
    const obj = value;
    if (typeof obj.pieceCid !== 'string') {
        return false;
    }
    if (asPieceCID(obj.pieceCid) == null) {
        return false;
    }
    return true;
}
export function validateDataSetCreationStatusResponse(value) {
    if (!isDataSetCreationStatusResponse(value)) {
        throw new Error('Invalid data set creation status response format');
    }
    return value;
}
export function validatePieceAdditionStatusResponse(value) {
    if (!isPieceAdditionStatusResponse(value)) {
        throw new Error('Invalid piece addition status response format');
    }
    return value;
}
export function validateFindPieceResponse(value) {
    if (!isFindPieceResponse(value)) {
        if (typeof value === 'object' && value != null) {
            const obj = value;
            const cidStr = (obj.pieceCid ?? obj.piece_cid);
            if (cidStr != null && asPieceCID(cidStr) == null) {
                throw new Error('Invalid find piece response: pieceCid is not a valid PieceCID');
            }
        }
        throw new Error('Invalid find piece response format');
    }
    const obj = value;
    const cidStr = (obj.pieceCid ?? obj.piece_cid);
    const pieceCid = asPieceCID(cidStr);
    if (pieceCid == null) {
        throw new Error('Invalid find piece response: pieceCid is not a valid PieceCID');
    }
    return {
        pieceCid,
        piece_cid: obj.piece_cid,
    };
}
export function asDataSetPieceData(value) {
    if (typeof value !== 'object' || value == null) {
        return null;
    }
    const obj = value;
    if (typeof obj.pieceId !== 'number') {
        return null;
    }
    if (typeof obj.pieceCid !== 'string') {
        return null;
    }
    if (typeof obj.subPieceCid !== 'string') {
        return null;
    }
    if (typeof obj.subPieceOffset !== 'number') {
        return null;
    }
    const pieceCid = asPieceCID(obj.pieceCid);
    const subPieceCid = asPieceCID(obj.subPieceCid);
    if (pieceCid == null || subPieceCid == null) {
        return null;
    }
    return {
        pieceId: obj.pieceId,
        pieceCid,
        subPieceCid,
        subPieceOffset: obj.subPieceOffset,
    };
}
export function asDataSetData(value) {
    if (typeof value !== 'object' || value == null) {
        return null;
    }
    const obj = value;
    if (typeof obj.id !== 'number') {
        return null;
    }
    if (!Array.isArray(obj.pieces)) {
        return null;
    }
    const convertedPieces = [];
    for (const piece of obj.pieces) {
        const convertedPiece = asDataSetPieceData(piece);
        if (convertedPiece == null) {
            return null;
        }
        convertedPieces.push(convertedPiece);
    }
    if (typeof obj.nextChallengeEpoch !== 'number') {
        return null;
    }
    return {
        id: obj.id,
        pieces: convertedPieces,
        nextChallengeEpoch: obj.nextChallengeEpoch,
    };
}
//# sourceMappingURL=validation.js.map
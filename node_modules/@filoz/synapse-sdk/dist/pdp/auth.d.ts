import { ethers } from 'ethers';
import { type PieceCID } from '../piece/index.ts';
import type { AuthSignature, MetadataEntry } from '../types.ts';
declare global {
    interface Window {
        ethereum?: any;
    }
}
export declare class PDPAuthHelper {
    private readonly signer;
    private readonly domain;
    readonly WITH_CDN_METADATA: MetadataEntry;
    constructor(serviceContractAddress: string, signer: ethers.Signer, chainId: bigint);
    private getUnderlyingSigner;
    private isMetaMaskSigner;
    private signWithMetaMask;
    signCreateDataSet(clientDataSetId: number | bigint, payee: string, metadata?: MetadataEntry[]): Promise<AuthSignature>;
    signAddPieces(clientDataSetId: number | bigint, firstPieceId: number | bigint, pieceDataArray: PieceCID[] | string[], metadata?: MetadataEntry[][]): Promise<AuthSignature>;
    signSchedulePieceRemovals(clientDataSetId: number | bigint, pieceIds: Array<number | bigint>): Promise<AuthSignature>;
    signDeleteDataSet(clientDataSetId: number | bigint): Promise<AuthSignature>;
    getSignerAddress(): Promise<string>;
}
//# sourceMappingURL=auth.d.ts.map
import { ethers } from 'ethers';
import { CONTRACT_ABIS } from "../utils/index.js";
export class PDPVerifier {
    _provider;
    _contractAddress;
    _contract;
    constructor(provider, contractAddress) {
        this._provider = provider;
        this._contractAddress = contractAddress;
        this._contract = new ethers.Contract(this._contractAddress, CONTRACT_ABIS.PDP_VERIFIER, this._provider);
    }
    async dataSetLive(dataSetId) {
        return await this._contract.dataSetLive(dataSetId);
    }
    async getNextPieceId(dataSetId) {
        const nextPieceId = await this._contract.getNextPieceId(dataSetId);
        return Number(nextPieceId);
    }
    async getDataSetListener(dataSetId) {
        return await this._contract.getDataSetListener(dataSetId);
    }
    async getDataSetStorageProvider(dataSetId) {
        const [storageProvider, proposedStorageProvider] = await this._contract.getDataSetStorageProvider(dataSetId);
        return { storageProvider, proposedStorageProvider };
    }
    async getDataSetLeafCount(dataSetId) {
        const leafCount = await this._contract.getDataSetLeafCount(dataSetId);
        return Number(leafCount);
    }
    extractDataSetIdFromReceipt(receipt) {
        try {
            for (const log of receipt.logs) {
                try {
                    const parsedLog = this._contract.interface.parseLog({
                        topics: log.topics,
                        data: log.data,
                    });
                    if (parsedLog != null && parsedLog.name === 'DataSetCreated') {
                        return Number(parsedLog.args.setId);
                    }
                }
                catch {
                }
            }
            return null;
        }
        catch (error) {
            throw new Error(`Failed to extract data set ID from receipt: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    getContractAddress() {
        return this._contract.target;
    }
}
//# sourceMappingURL=verifier.js.map
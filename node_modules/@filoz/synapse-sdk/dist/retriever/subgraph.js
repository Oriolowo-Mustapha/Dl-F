import { createError } from "../utils/errors.js";
import { fetchPiecesFromProviders } from "./utils.js";
export class SubgraphRetriever {
    subgraphService;
    childRetriever;
    constructor(subgraphService, childRetriever) {
        this.subgraphService = subgraphService;
        this.childRetriever = childRetriever;
    }
    async findProviders(pieceCid, providerAddress) {
        if (providerAddress != null) {
            const provider = await this.subgraphService.getProviderByAddress(providerAddress);
            return provider !== null ? [provider] : [];
        }
        return await this.subgraphService.getApprovedProvidersForPieceCID(pieceCid);
    }
    async fetchPiece(pieceCid, client, options) {
        const tryChildOrThrow = async (reason) => {
            if (this.childRetriever !== undefined) {
                return await this.childRetriever.fetchPiece(pieceCid, client, options);
            }
            throw createError('SubgraphRetriever', 'fetchPiece', `Failed to retrieve piece ${pieceCid.toString()}: ${reason}`);
        };
        let providersToTry = [];
        try {
            providersToTry = await this.findProviders(pieceCid, options?.providerAddress);
        }
        catch {
            return await tryChildOrThrow('Provider discovery failed and no additional retriever method was configured');
        }
        if (providersToTry.length === 0) {
            return await tryChildOrThrow('No providers found and no additional retriever method was configured');
        }
        try {
            return await fetchPiecesFromProviders(providersToTry, pieceCid, 'SubgraphRetriever', options?.signal);
        }
        catch {
            return await tryChildOrThrow('All provider retrieval attempts failed and no additional retriever method was configured');
        }
    }
}
//# sourceMappingURL=subgraph.js.map
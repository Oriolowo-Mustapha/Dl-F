export declare const filecoinWarmStorageServiceAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_pdpVerifierAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_paymentsContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_usdfcTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_filCDNBeneficiaryAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_serviceProviderRegistry";
        readonly internalType: "contract ServiceProviderRegistry";
        readonly type: "address";
    }, {
        readonly name: "_sessionKeyRegistry";
        readonly internalType: "contract SessionKeyRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "addApprovedProvider";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "totalBytes";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "calculateRatesPerEpoch";
    readonly outputs: readonly [{
        readonly name: "storageRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "cacheMissRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "cdnRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_maxProvingPeriod";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "_challengeWindowSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "configureProvingPeriod";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "serviceProvider";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "dataSetCreated";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "dataSetDeleted";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "extsload";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "size";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "extsloadStruct";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "filCDNBeneficiaryAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getEffectiveRates";
    readonly outputs: readonly [{
        readonly name: "serviceFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "spPayment";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "epoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getProvingPeriodForEpoch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getServicePrice";
    readonly outputs: readonly [{
        readonly name: "pricing";
        readonly internalType: "struct FilecoinWarmStorageService.ServicePricing";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "pricePerTiBPerMonthNoCDN";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pricePerTiBPerMonthWithCDN";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "epochsPerMonth";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_maxProvingPeriod";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "_challengeWindowSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "_filCDNControllerAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "_description";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "epoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isEpochProven";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_viewContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "migrate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "challengeEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "leafCount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "nextProvingPeriod";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paymentsContractAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pdpVerifierAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "firstAdded";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceData";
        readonly internalType: "struct Cids.Cid[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "piecesAdded";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "piecesScheduledRemove";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "challengeCount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "possessionProven";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "terminator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "endEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "railTerminated";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "removeApprovedProvider";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "serviceCommissionBps";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "serviceProviderRegistry";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ServiceProviderRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "sessionKeyRegistry";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract SessionKeyRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_viewContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setViewContract";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "oldServiceProvider";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newServiceProvider";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "storageProviderChanged";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "terminateCDNService";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "terminateService";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newController";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferFilCDNController";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newCommissionBps";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "updateServiceCommission";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "usdfcTokenAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "proposedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "fromEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "toEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "validatePayment";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "struct IValidator.ValidationResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "modifiedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "settleUpto";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "note";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "viewContractAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "endEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "cacheMissRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "cdnRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CDNPaymentTerminated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "cacheMissRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "cdnRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CDNServiceTerminated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ContractUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "pdpRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "cacheMissRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "cdnRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "payer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "serviceProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "payee";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "metadataKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
        readonly indexed: false;
    }, {
        readonly name: "metadataValues";
        readonly internalType: "string[]";
        readonly type: "string[]";
        readonly indexed: false;
    }];
    readonly name: "DataSetCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "oldServiceProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newServiceProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "DataSetServiceProviderChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "periodsFaulted";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "FaultRecord";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "oldController";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newController";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "FilCDNControllerChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "description";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "FilecoinServiceDeployed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "endEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "pdpRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "PDPPaymentTerminated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "originalAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "modifiedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "faultedEpochs";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "PaymentArbitrated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "pieceId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "keys";
        readonly internalType: "string[]";
        readonly type: "string[]";
        readonly indexed: false;
    }, {
        readonly name: "values";
        readonly internalType: "string[]";
        readonly type: "string[]";
        readonly indexed: false;
    }];
    readonly name: "PieceAdded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "ProviderApproved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "ProviderUnapproved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "newRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RailRateUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "pdpRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "cacheMissRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "cdnRailId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ServiceTerminated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "viewContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "ViewContractSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "expectedPayer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectedPayee";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "CallerNotPayerOrPayee";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "CallerNotPayments";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "windowStart";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "nowBlock";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ChallengeWindowTooEarly";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "commissionType";
        readonly internalType: "enum Errors.CommissionType";
        readonly type: "uint8";
    }, {
        readonly name: "max";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CommissionExceedsMaximum";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "DataSetNotFoundForRail";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "DataSetNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "DataSetPaymentAlreadyTerminated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pdpEndEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currentBlock";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "DataSetPaymentBeyondEndEpoch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DivisionByZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "DuplicateMetadataKey";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExtraDataRequired";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FilCDNPaymentAlreadyTerminated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FilCDNServiceNotConfigured";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minExpected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidChallengeCount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minAllowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxAllowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidChallengeEpoch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "maxProvingPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "challengeWindowSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidChallengeWindowSize";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidDataSetId";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "fromEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "toEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidEpochRange";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expectedLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actualLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidSignatureLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MaxProvingPeriodZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "metadataArrayCount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceCount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MetadataArrayCountMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "keysLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "valuesLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MetadataKeyAndValueLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxAllowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MetadataKeyExceedsMaxLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxAllowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MetadataValueExceedsMaxLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "periodDeadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "nowBlock";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NextProvingPeriodAlreadyCalled";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NoPDPPaymentRail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OldServiceProviderMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OnlyFilCDNControllerAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OnlyPDPVerifierAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OnlySelf";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pdpEndEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "cdnEndEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "PaymentRailsNotFinalized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProofAlreadySubmitted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProviderAlreadyApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "provider";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProviderNotApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProviderNotInApprovedList";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "provider";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ProviderNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProvingNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "nowBlock";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProvingPeriodPassed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "RailNotAssociated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ServiceContractMustTerminateRail";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "maxAllowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "keysLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "TooManyMetadataKeys";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "UnsupportedSignatureV";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "field";
        readonly internalType: "enum Errors.AddressField";
        readonly type: "uint8";
    }];
    readonly name: "ZeroAddress";
}];
export declare const filecoinWarmStorageServiceAddress: {
    readonly 314: "0x0000000000000000000000000000000000000000";
    readonly 314159: "0x0000000000000000000000000000000000000000";
};
export declare const filecoinWarmStorageServiceConfig: {
    readonly address: {
        readonly 314: "0x0000000000000000000000000000000000000000";
        readonly 314159: "0x0000000000000000000000000000000000000000";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_pdpVerifierAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_paymentsContractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_usdfcTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_filCDNBeneficiaryAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_serviceProviderRegistry";
            readonly internalType: "contract ServiceProviderRegistry";
            readonly type: "address";
        }, {
            readonly name: "_sessionKeyRegistry";
            readonly internalType: "contract SessionKeyRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "addApprovedProvider";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "totalBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "calculateRatesPerEpoch";
        readonly outputs: readonly [{
            readonly name: "storageRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cacheMissRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cdnRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_maxProvingPeriod";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "_challengeWindowSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "configureProvingPeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "dataSetCreated";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "dataSetDeleted";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "extsload";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "size";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "extsloadStruct";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "filCDNBeneficiaryAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getEffectiveRates";
        readonly outputs: readonly [{
            readonly name: "serviceFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "spPayment";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "epoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getProvingPeriodForEpoch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getServicePrice";
        readonly outputs: readonly [{
            readonly name: "pricing";
            readonly internalType: "struct FilecoinWarmStorageService.ServicePricing";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "pricePerTiBPerMonthNoCDN";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "pricePerTiBPerMonthWithCDN";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "epochsPerMonth";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_maxProvingPeriod";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "_challengeWindowSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "_filCDNControllerAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "_description";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "epoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "isEpochProven";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_viewContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "migrate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "challengeEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "leafCount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "nextProvingPeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paymentsContractAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pdpVerifierAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "firstAdded";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceData";
            readonly internalType: "struct Cids.Cid[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "piecesAdded";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "piecesScheduledRemove";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "challengeCount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "possessionProven";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "terminator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "endEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "railTerminated";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "removeApprovedProvider";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "serviceCommissionBps";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "serviceProviderRegistry";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ServiceProviderRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "sessionKeyRegistry";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract SessionKeyRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_viewContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setViewContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "oldServiceProvider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newServiceProvider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "storageProviderChanged";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "terminateCDNService";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "terminateService";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newController";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferFilCDNController";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newCommissionBps";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "updateServiceCommission";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "usdfcTokenAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "proposedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fromEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "toEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "validatePayment";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "struct IValidator.ValidationResult";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "modifiedAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "settleUpto";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "note";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "viewContractAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "endEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "cacheMissRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "cdnRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "CDNPaymentTerminated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "cacheMissRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "cdnRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "CDNServiceTerminated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "ContractUpgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "pdpRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "cacheMissRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "cdnRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "metadataKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
            readonly indexed: false;
        }, {
            readonly name: "metadataValues";
            readonly internalType: "string[]";
            readonly type: "string[]";
            readonly indexed: false;
        }];
        readonly name: "DataSetCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "oldServiceProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newServiceProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "DataSetServiceProviderChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "periodsFaulted";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "FaultRecord";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "oldController";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "newController";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "FilCDNControllerChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "description";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "FilecoinServiceDeployed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "endEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "pdpRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "PDPPaymentTerminated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "originalAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "modifiedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "faultedEpochs";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "PaymentArbitrated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "keys";
            readonly internalType: "string[]";
            readonly type: "string[]";
            readonly indexed: false;
        }, {
            readonly name: "values";
            readonly internalType: "string[]";
            readonly type: "string[]";
            readonly indexed: false;
        }];
        readonly name: "PieceAdded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "ProviderApproved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "ProviderUnapproved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "newRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RailRateUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "pdpRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "cacheMissRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "cdnRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "ServiceTerminated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "viewContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "ViewContractSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expectedPayer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectedPayee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "CallerNotPayerOrPayee";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "CallerNotPayments";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "windowStart";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nowBlock";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ChallengeWindowTooEarly";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "commissionType";
            readonly internalType: "enum Errors.CommissionType";
            readonly type: "uint8";
        }, {
            readonly name: "max";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CommissionExceedsMaximum";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "DataSetNotFoundForRail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "DataSetNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "DataSetPaymentAlreadyTerminated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pdpEndEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currentBlock";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "DataSetPaymentBeyondEndEpoch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DivisionByZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "DuplicateMetadataKey";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExtraDataRequired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "FilCDNPaymentAlreadyTerminated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "FilCDNServiceNotConfigured";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minExpected";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidChallengeCount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minAllowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxAllowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidChallengeEpoch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "maxProvingPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "challengeWindowSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidChallengeWindowSize";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidDataSetId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "fromEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "toEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidEpochRange";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expectedLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actualLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidSignatureLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MaxProvingPeriodZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "metadataArrayCount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceCount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "MetadataArrayCountMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "keysLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "valuesLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "MetadataKeyAndValueLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxAllowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "MetadataKeyExceedsMaxLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxAllowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "MetadataValueExceedsMaxLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "periodDeadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nowBlock";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "NextProvingPeriodAlreadyCalled";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "NoPDPPaymentRail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OldServiceProviderMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OnlyFilCDNControllerAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OnlyPDPVerifierAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OnlySelf";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pdpEndEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cdnEndEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "PaymentRailsNotFinalized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProofAlreadySubmitted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProviderAlreadyApproved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "provider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProviderNotApproved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProviderNotInApprovedList";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "provider";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ProviderNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProvingNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nowBlock";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProvingPeriodPassed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "RailNotAssociated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ServiceContractMustTerminateRail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "maxAllowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "keysLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "TooManyMetadataKeys";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "v";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "UnsupportedSignatureV";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "field";
            readonly internalType: "enum Errors.AddressField";
            readonly type: "uint8";
        }];
        readonly name: "ZeroAddress";
    }];
};
export declare const filecoinWarmStorageServiceStateViewAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_service";
        readonly internalType: "contract FilecoinWarmStorageService";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "challengeWindow";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "clientDataSetIDs";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "clientDataSets";
    readonly outputs: readonly [{
        readonly name: "dataSetIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "filCDNControllerAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getAllDataSetMetadata";
    readonly outputs: readonly [{
        readonly name: "keys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "values";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getAllPieceMetadata";
    readonly outputs: readonly [{
        readonly name: "keys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "values";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getApprovedProviders";
    readonly outputs: readonly [{
        readonly name: "providerIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getChallengesPerProof";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "client";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getClientDataSets";
    readonly outputs: readonly [{
        readonly name: "infos";
        readonly internalType: "struct FilecoinWarmStorageService.DataSetInfo[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "pdpRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cacheMissRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cdnRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commissionBps";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "clientDataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pdpEndEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cdnEndEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getDataSet";
    readonly outputs: readonly [{
        readonly name: "info";
        readonly internalType: "struct FilecoinWarmStorageService.DataSetInfo";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "pdpRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cacheMissRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cdnRailId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commissionBps";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "clientDataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pdpEndEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "cdnEndEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getDataSetMetadata";
    readonly outputs: readonly [{
        readonly name: "exists";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "value";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "leafCount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getDataSetSizeInBytes";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getMaxProvingPeriod";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getPDPConfig";
    readonly outputs: readonly [{
        readonly name: "maxProvingPeriod";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "challengeWindowSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "challengesPerProof";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "initChallengeWindowStart";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getPieceMetadata";
    readonly outputs: readonly [{
        readonly name: "exists";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "value";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isProviderApproved";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "nextPDPChallengeWindowStart";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "periodId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "provenPeriods";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "provenThisPeriod";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "provingActivationEpoch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "provingDeadline";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "railToDataSet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "service";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract FilecoinWarmStorageService";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "dataSetId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProvingPeriodNotInitialized";
}];
export declare const filecoinWarmStorageServiceStateViewAddress: {
    readonly 314: "0x0000000000000000000000000000000000000000";
    readonly 314159: "0x0000000000000000000000000000000000000000";
};
export declare const filecoinWarmStorageServiceStateViewConfig: {
    readonly address: {
        readonly 314: "0x0000000000000000000000000000000000000000";
        readonly 314159: "0x0000000000000000000000000000000000000000";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_service";
            readonly internalType: "contract FilecoinWarmStorageService";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "challengeWindow";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "clientDataSetIDs";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "clientDataSets";
        readonly outputs: readonly [{
            readonly name: "dataSetIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "filCDNControllerAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getAllDataSetMetadata";
        readonly outputs: readonly [{
            readonly name: "keys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "values";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getAllPieceMetadata";
        readonly outputs: readonly [{
            readonly name: "keys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "values";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getApprovedProviders";
        readonly outputs: readonly [{
            readonly name: "providerIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getChallengesPerProof";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "client";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getClientDataSets";
        readonly outputs: readonly [{
            readonly name: "infos";
            readonly internalType: "struct FilecoinWarmStorageService.DataSetInfo[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "pdpRailId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "cacheMissRailId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "cdnRailId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "payer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "payee";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "serviceProvider";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commissionBps";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "clientDataSetId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "pdpEndEpoch";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "providerId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "cdnEndEpoch";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getDataSet";
        readonly outputs: readonly [{
            readonly name: "info";
            readonly internalType: "struct FilecoinWarmStorageService.DataSetInfo";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "pdpRailId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "cacheMissRailId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "cdnRailId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "payer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "payee";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "serviceProvider";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commissionBps";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "clientDataSetId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "pdpEndEpoch";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "providerId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "cdnEndEpoch";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getDataSetMetadata";
        readonly outputs: readonly [{
            readonly name: "exists";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "value";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "leafCount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getDataSetSizeInBytes";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getMaxProvingPeriod";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getPDPConfig";
        readonly outputs: readonly [{
            readonly name: "maxProvingPeriod";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "challengeWindowSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "challengesPerProof";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "initChallengeWindowStart";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getPieceMetadata";
        readonly outputs: readonly [{
            readonly name: "exists";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "value";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "isProviderApproved";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "nextPDPChallengeWindowStart";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "periodId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "provenPeriods";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "provenThisPeriod";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "provingActivationEpoch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "provingDeadline";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "railToDataSet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "service";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract FilecoinWarmStorageService";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "dataSetId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProvingPeriodNotInitialized";
    }];
};
export declare const pdpVerifierAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "BURN_ACTOR";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "EXTRA_DATA_MAX_SIZE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "FIL_USD_PRICE_FEED_ID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LEAF_SIZE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_ENQUEUED_REMOVALS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_PIECE_SIZE_LOG2";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "NO_CHALLENGE_SCHEDULED";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "NO_PROVEN_EPOCH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PYTH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPyth";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "RANDOMNESS_PRECOMPILE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "SECONDS_IN_DAY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceData";
        readonly internalType: "struct Cids.Cid[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "addPieces";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "estimatedGasFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "calculateProofFee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "claimDataSetStorageProvider";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "listenerAddr";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "createDataSet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "dataSetLive";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "deleteDataSet";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "leafIndexs";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "findPieceIds";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IPDPTypes.PieceIdAndOffset[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "offset";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getActivePieceCount";
    readonly outputs: readonly [{
        readonly name: "activeCount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "offset";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getActivePieces";
    readonly outputs: readonly [{
        readonly name: "pieces";
        readonly internalType: "struct Cids.Cid[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "pieceIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "rawSizes";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "hasMore";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getChallengeFinality";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getChallengeRange";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getDataSetLastProvenEpoch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getDataSetLeafCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getDataSetListener";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getDataSetStorageProvider";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getFILUSDPrice";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "";
        readonly internalType: "int32";
        readonly type: "int32";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getNextChallengeEpoch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getNextDataSetId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getNextPieceId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getPieceCid";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Cids.Cid";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getPieceLeafCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "epoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getRandomness";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getScheduledRemovals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_challengeFinality";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "migrate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "challengeEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "nextProvingPeriod";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "pieceChallengable";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "pieceLive";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newStorageProvider";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "proposeDataSetStorageProvider";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "proofs";
        readonly internalType: "struct IPDPTypes.Proof[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "leaf";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "proof";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
    }];
    readonly name: "provePossession";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "pieceIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "schedulePieceDeletions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ContractUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "storageProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "DataSetCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "deletedLeafCount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "DataSetDeleted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "DataSetEmpty";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "challengeEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "leafCount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "NextProvingPeriod";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "pieceIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "pieceCids";
        readonly internalType: "struct Cids.Cid[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly indexed: false;
    }];
    readonly name: "PiecesAdded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "pieceIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }];
    readonly name: "PiecesRemoved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "challenges";
        readonly internalType: "struct IPDPTypes.PieceIdAndOffset[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "offset";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly indexed: false;
    }];
    readonly name: "PossessionProven";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "PriceOracleFailure";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "fee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "price";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }, {
        readonly name: "expo";
        readonly internalType: "int32";
        readonly type: "int32";
        readonly indexed: false;
    }];
    readonly name: "ProofFeePaid";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "setId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "oldStorageProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newStorageProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "StorageProviderChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "idx";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "msg";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "IndexedError";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}];
export declare const pdpVerifierAddress: {
    readonly 314: "0x0000000000000000000000000000000000000000";
    readonly 314159: "0x0000000000000000000000000000000000000000";
};
export declare const pdpVerifierConfig: {
    readonly address: {
        readonly 314: "0x0000000000000000000000000000000000000000";
        readonly 314159: "0x0000000000000000000000000000000000000000";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "BURN_ACTOR";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "EXTRA_DATA_MAX_SIZE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "FIL_USD_PRICE_FEED_ID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LEAF_SIZE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_ENQUEUED_REMOVALS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_PIECE_SIZE_LOG2";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "NO_CHALLENGE_SCHEDULED";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "NO_PROVEN_EPOCH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "PYTH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPyth";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "RANDOMNESS_PRECOMPILE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "SECONDS_IN_DAY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceData";
            readonly internalType: "struct Cids.Cid[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "addPieces";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "estimatedGasFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "calculateProofFee";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "claimDataSetStorageProvider";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "listenerAddr";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "createDataSet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "dataSetLive";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "deleteDataSet";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "leafIndexs";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "findPieceIds";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IPDPTypes.PieceIdAndOffset[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "pieceId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "offset";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getActivePieceCount";
        readonly outputs: readonly [{
            readonly name: "activeCount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "offset";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getActivePieces";
        readonly outputs: readonly [{
            readonly name: "pieces";
            readonly internalType: "struct Cids.Cid[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "pieceIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "rawSizes";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "hasMore";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getChallengeFinality";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getChallengeRange";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getDataSetLastProvenEpoch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getDataSetLeafCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getDataSetListener";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getDataSetStorageProvider";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getFILUSDPrice";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "";
            readonly internalType: "int32";
            readonly type: "int32";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getNextChallengeEpoch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getNextDataSetId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getNextPieceId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getPieceCid";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Cids.Cid";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getPieceLeafCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "epoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getRandomness";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getScheduledRemovals";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_challengeFinality";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "migrate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "challengeEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "nextProvingPeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "pieceChallengable";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "pieceLive";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "newStorageProvider";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "proposeDataSetStorageProvider";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "proofs";
            readonly internalType: "struct IPDPTypes.Proof[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "leaf";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "proof";
                readonly internalType: "bytes32[]";
                readonly type: "bytes32[]";
            }];
        }];
        readonly name: "provePossession";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "pieceIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "extraData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "schedulePieceDeletions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "ContractUpgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "storageProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "DataSetCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "deletedLeafCount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "DataSetDeleted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "DataSetEmpty";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "challengeEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "leafCount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "NextProvingPeriod";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "pieceIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "pieceCids";
            readonly internalType: "struct Cids.Cid[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
            readonly indexed: false;
        }];
        readonly name: "PiecesAdded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "pieceIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }];
        readonly name: "PiecesRemoved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "challenges";
            readonly internalType: "struct IPDPTypes.PieceIdAndOffset[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "pieceId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "offset";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
            readonly indexed: false;
        }];
        readonly name: "PossessionProven";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "reason";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "PriceOracleFailure";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "fee";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "price";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }, {
            readonly name: "expo";
            readonly internalType: "int32";
            readonly type: "int32";
            readonly indexed: false;
        }];
        readonly name: "ProofFeePaid";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "setId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "oldStorageProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newStorageProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "StorageProviderChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "idx";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "msg";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "IndexedError";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }];
};
export declare const paymentsAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "COMMISSION_MAX_BPS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "NETWORK_FEE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "accounts";
    readonly outputs: readonly [{
        readonly name: "funds";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupCurrent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupLastSettledAt";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "validator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "commissionRateBps";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "serviceFeeRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "createRail";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "deposit";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "depositWithPermit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "rateAllowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupAllowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxLockupPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "depositWithPermitAndApproveOperator";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "rateAllowanceIncrease";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupAllowanceIncrease";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "depositWithPermitAndIncreaseOperatorApproval";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getAccountInfoIfSettled";
    readonly outputs: readonly [{
        readonly name: "fundedUntilEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currentFunds";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "availableFunds";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currentLockupRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getRail";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Payments.RailView";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "validator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "paymentRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupFixed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "settledUpTo";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "endEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commissionRateBps";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "serviceFeeRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payee";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getRailsForPayeeAndToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Payments.RailInfo[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "isTerminated";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "endEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getRailsForPayerAndToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Payments.RailInfo[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "isTerminated";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "endEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getRateChangeQueueSize";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "hasCollectedFees";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "rateAllowanceIncrease";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupAllowanceIncrease";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "increaseOperatorApproval";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "period";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupFixed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "modifyRailLockup";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "oneTimePayment";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "modifyRailPayment";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "operatorApprovals";
    readonly outputs: readonly [{
        readonly name: "isApproved";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "rateAllowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupAllowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "rateUsage";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupUsage";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxLockupPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "rateAllowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupAllowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxLockupPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setOperatorApproval";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "untilEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "settleRail";
    readonly outputs: readonly [{
        readonly name: "totalSettledAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalNetPayeeAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalOperatorCommission";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "finalSettledEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "note";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "settleTerminatedRailWithoutValidation";
    readonly outputs: readonly [{
        readonly name: "totalSettledAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalNetPayeeAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalOperatorCommission";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "finalSettledEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "note";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "terminateRail";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdrawTo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "lockupCurrent";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "lockupRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "lockupLastSettledAt";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "AccountLockupSettled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "usedPermit";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "DepositRecorded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "client";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }, {
        readonly name: "rateAllowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "lockupAllowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "maxLockupPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "OperatorApprovalUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "payer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "payee";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "validator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "serviceFeeRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "commissionRateBps";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RailCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "RailFinalized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "oldLockupPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "newLockupPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "oldLockupFixed";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "newLockupFixed";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RailLockupModified";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "netPayeeAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "operatorCommission";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RailOneTimePaymentProcessed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "oldRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "newRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RailRateModified";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "totalSettledAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "totalNetPayeeAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "operatorCommission";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "settledUpTo";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RailSettled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "by";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "endEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RailTerminated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "WithdrawRecorded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxSettlementEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "blockNumber";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotModifyTerminatedRailBeyondEndEpoch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxAllowedEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotSettleFutureEpochs";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requiredBlock";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currentBlock";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotSettleTerminatedRailBeforeMaxEpoch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "maxAllowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CommissionRateTooHigh";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "oldLockup";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currentLockup";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CurrentLockupLessThanOldLockup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currentLockup";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupReduction";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InsufficientCurrentLockup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "required";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InsufficientFundsForOneTimePayment";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "available";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "required";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InsufficientFundsForSettlement";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "available";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "required";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InsufficientLockupForSettlement";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "required";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "sent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InsufficientNativeTokenForBurn";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "available";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requested";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InsufficientUnlockedFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "nextRateChangeUntilEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "processedEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidRateChangeQueueState";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "actualPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actualLockupFixed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedLockupFixed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidTerminatedRailModification";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "lockupCurrent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "fundsCurrent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LockupExceedsFundsInvariant";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actualLockupFixed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedLockupFixed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LockupFixedIncreaseNotAllowedDueToInsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectedLockup";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actualLockup";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LockupInconsistencyDuringRailFinalization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "isSettled";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "currentRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LockupNotSettledRateChangeNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actualLockupPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedLockupPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LockupPeriodChangeNotAllowedDueToInsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "maxAllowedPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedPeriod";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LockupPeriodExceedsOperatorMaximum";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "paymentRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lockupRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LockupRateInconsistent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "lockupRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "oldRate";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LockupRateLessThanOldRate";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MissingServiceFeeRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "required";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "sent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MustSendExactNativeAmount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NativeTokenNotAccepted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NativeTokenNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NativeTransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "expectedSettledUpTo";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actualSettledUpTo";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NoProgressInSettlement";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "allowedClient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowedOperator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "NotAuthorizedToTerminateRail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "available";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "required";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "OneTimePaymentExceedsLockup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OnlyRailClientAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OnlyRailOperatorAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expectedFrom";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectedOperator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectedTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OnlyRailParticipantAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "allowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedUsage";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "OperatorLockupAllowanceExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OperatorNotApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "allowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedUsage";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "OperatorRateAllowanceExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "PermitRecipientMustBeMsgSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "RailAlreadyTerminated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "RailInactiveOrSettled";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "RailNotTerminated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "RateChangeNotAllowedOnTerminatedRail";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "nextUntilEpoch";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "RateChangeQueueNotEmpty";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxAllowed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attempted";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ValidatorModifiedAmountExceedsMaximum";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "allowedStart";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedStart";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ValidatorSettledBeforeSegmentStart";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "railId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "allowedEnd";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "attemptedEnd";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ValidatorSettledBeyondSegmentEnd";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "varName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "ZeroAddressNotAllowed";
}];
export declare const paymentsAddress: {
    readonly 314: "0x0000000000000000000000000000000000000000";
    readonly 314159: "0x0000000000000000000000000000000000000000";
};
export declare const paymentsConfig: {
    readonly address: {
        readonly 314: "0x0000000000000000000000000000000000000000";
        readonly 314159: "0x0000000000000000000000000000000000000000";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "COMMISSION_MAX_BPS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "NETWORK_FEE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "accounts";
        readonly outputs: readonly [{
            readonly name: "funds";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupCurrent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupLastSettledAt";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "validator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commissionRateBps";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "serviceFeeRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "createRail";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "v";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "r";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "s";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "depositWithPermit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "v";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "r";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "s";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rateAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxLockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "depositWithPermitAndApproveOperator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "v";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "r";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "s";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rateAllowanceIncrease";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupAllowanceIncrease";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "depositWithPermitAndIncreaseOperatorApproval";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getAccountInfoIfSettled";
        readonly outputs: readonly [{
            readonly name: "fundedUntilEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currentFunds";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "availableFunds";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currentLockupRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getRail";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Payments.RailView";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "from";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "operator";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "validator";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "paymentRate";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "lockupPeriod";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "lockupFixed";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "settledUpTo";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "endEpoch";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commissionRateBps";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "serviceFeeRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getRailsForPayeeAndToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Payments.RailInfo[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "railId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "isTerminated";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "endEpoch";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getRailsForPayerAndToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Payments.RailInfo[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "railId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "isTerminated";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "endEpoch";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getRateChangeQueueSize";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "hasCollectedFees";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rateAllowanceIncrease";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupAllowanceIncrease";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "increaseOperatorApproval";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "period";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupFixed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "modifyRailLockup";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "newRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "oneTimePayment";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "modifyRailPayment";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "operatorApprovals";
        readonly outputs: readonly [{
            readonly name: "isApproved";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "rateAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "rateUsage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupUsage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxLockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "rateAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxLockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setOperatorApproval";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "untilEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "settleRail";
        readonly outputs: readonly [{
            readonly name: "totalSettledAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalNetPayeeAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalOperatorCommission";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "finalSettledEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "note";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "settleTerminatedRailWithoutValidation";
        readonly outputs: readonly [{
            readonly name: "totalSettledAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalNetPayeeAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalOperatorCommission";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "finalSettledEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "note";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "terminateRail";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "withdrawTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "lockupCurrent";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "lockupRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "lockupLastSettledAt";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "AccountLockupSettled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "usedPermit";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "DepositRecorded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "client";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }, {
            readonly name: "rateAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "lockupAllowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "maxLockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "OperatorApprovalUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "validator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "serviceFeeRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "commissionRateBps";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RailCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "RailFinalized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "oldLockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "newLockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "oldLockupFixed";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "newLockupFixed";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RailLockupModified";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "netPayeeAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "operatorCommission";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RailOneTimePaymentProcessed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "oldRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "newRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RailRateModified";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "totalSettledAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "totalNetPayeeAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "operatorCommission";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "settledUpTo";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RailSettled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "by";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "endEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RailTerminated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "WithdrawRecorded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxSettlementEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "blockNumber";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CannotModifyTerminatedRailBeyondEndEpoch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxAllowedEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CannotSettleFutureEpochs";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requiredBlock";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currentBlock";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CannotSettleTerminatedRailBeforeMaxEpoch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "maxAllowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CommissionRateTooHigh";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "oldLockup";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currentLockup";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CurrentLockupLessThanOldLockup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currentLockup";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupReduction";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientCurrentLockup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFundsForOneTimePayment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "available";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFundsForSettlement";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "available";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientLockupForSettlement";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientNativeTokenForBurn";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "available";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requested";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientUnlockedFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "nextRateChangeUntilEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "processedEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidRateChangeQueueState";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "actualPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actualLockupFixed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedLockupFixed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidTerminatedRailModification";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "lockupCurrent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsCurrent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LockupExceedsFundsInvariant";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actualLockupFixed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedLockupFixed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LockupFixedIncreaseNotAllowedDueToInsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectedLockup";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actualLockup";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LockupInconsistencyDuringRailFinalization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "isSettled";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "currentRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LockupNotSettledRateChangeNotAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actualLockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedLockupPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LockupPeriodChangeNotAllowedDueToInsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "maxAllowedPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requestedPeriod";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LockupPeriodExceedsOperatorMaximum";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "paymentRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lockupRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LockupRateInconsistent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "lockupRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "oldRate";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LockupRateLessThanOldRate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MissingServiceFeeRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "MustSendExactNativeAmount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "NativeTokenNotAccepted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NativeTokenNotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "NativeTransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expectedSettledUpTo";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actualSettledUpTo";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "NoProgressInSettlement";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "allowedClient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowedOperator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "NotAuthorizedToTerminateRail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "available";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "required";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "OneTimePaymentExceedsLockup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OnlyRailClientAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OnlyRailOperatorAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expectedFrom";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectedOperator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectedTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OnlyRailParticipantAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "allowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedUsage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "OperatorLockupAllowanceExceeded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OperatorNotApproved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "allowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedUsage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "OperatorRateAllowanceExceeded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "PermitRecipientMustBeMsgSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "RailAlreadyTerminated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "RailInactiveOrSettled";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "RailNotTerminated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "RateChangeNotAllowedOnTerminatedRail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "nextUntilEpoch";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "RateChangeQueueNotEmpty";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxAllowed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attempted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ValidatorModifiedAmountExceedsMaximum";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "allowedStart";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedStart";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ValidatorSettledBeforeSegmentStart";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "railId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "allowedEnd";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "attemptedEnd";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ValidatorSettledBeyondSegmentEnd";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "varName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "ZeroAddressNotAllowed";
    }];
};
export declare const serviceProviderRegistryAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "BURN_ACTOR";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_CAPABILITIES";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_CAPABILITY_KEY_LENGTH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_CAPABILITY_VALUE_LENGTH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "REGISTRATION_FEE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }];
    readonly name: "activeProductTypeProviderCount";
    readonly outputs: readonly [{
        readonly name: "count";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "activeProviderCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "productData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "capabilityKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "capabilityValues";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly name: "addProduct";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "addressToProviderId";
    readonly outputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "decodePDPOffering";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ServiceProviderRegistryStorage.PDPOffering";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "serviceURL";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "minPieceSizeInBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxPieceSizeInBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipniPiece";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "ipniIpfs";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "storagePricePerTibPerMonth";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minProvingPeriodInEpochs";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "location";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "paymentTokenAddress";
            readonly internalType: "contract IERC20";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "pdpOffering";
        readonly internalType: "struct ServiceProviderRegistryStorage.PDPOffering";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "serviceURL";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "minPieceSizeInBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxPieceSizeInBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipniPiece";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "ipniIpfs";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "storagePricePerTibPerMonth";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minProvingPeriodInEpochs";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "location";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "paymentTokenAddress";
            readonly internalType: "contract IERC20";
            readonly type: "address";
        }];
    }];
    readonly name: "encodePDPOffering";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "offset";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getActiveProvidersByProductType";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "struct ServiceProviderRegistryStorage.PaginatedProviders";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "providers";
            readonly internalType: "struct ServiceProviderRegistryStorage.ProviderWithProduct[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "providerId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "providerInfo";
                readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProviderInfo";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "serviceProvider";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "payee";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "name";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "description";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "isActive";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }];
            }, {
                readonly name: "product";
                readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProduct";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "productType";
                    readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
                    readonly type: "uint8";
                }, {
                    readonly name: "productData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "capabilityKeys";
                    readonly internalType: "string[]";
                    readonly type: "string[]";
                }, {
                    readonly name: "isActive";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }];
            }];
        }, {
            readonly name: "hasMore";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "offset";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getAllActiveProviders";
    readonly outputs: readonly [{
        readonly name: "providerIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "hasMore";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getNextProviderId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getPDPService";
    readonly outputs: readonly [{
        readonly name: "pdpOffering";
        readonly internalType: "struct ServiceProviderRegistryStorage.PDPOffering";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "serviceURL";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "minPieceSizeInBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxPieceSizeInBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipniPiece";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "ipniIpfs";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "storagePricePerTibPerMonth";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minProvingPeriodInEpochs";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "location";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "paymentTokenAddress";
            readonly internalType: "contract IERC20";
            readonly type: "address";
        }];
    }, {
        readonly name: "capabilityKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "isActive";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }];
    readonly name: "getProduct";
    readonly outputs: readonly [{
        readonly name: "productData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "capabilityKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "isActive";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "keys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly name: "getProductCapabilities";
    readonly outputs: readonly [{
        readonly name: "exists";
        readonly internalType: "bool[]";
        readonly type: "bool[]";
    }, {
        readonly name: "values";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getProductCapability";
    readonly outputs: readonly [{
        readonly name: "exists";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "value";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getProvider";
    readonly outputs: readonly [{
        readonly name: "info";
        readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProviderInfo";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "description";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "isActive";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getProviderByAddress";
    readonly outputs: readonly [{
        readonly name: "info";
        readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProviderInfo";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "description";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "isActive";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getProviderCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getProviderIdByAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "offset";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getProvidersByProductType";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "struct ServiceProviderRegistryStorage.PaginatedProviders";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "providers";
            readonly internalType: "struct ServiceProviderRegistryStorage.ProviderWithProduct[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "providerId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "providerInfo";
                readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProviderInfo";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "serviceProvider";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "payee";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "name";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "description";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "isActive";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }];
            }, {
                readonly name: "product";
                readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProduct";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "productType";
                    readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
                    readonly type: "uint8";
                }, {
                    readonly name: "productData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "capabilityKeys";
                    readonly internalType: "string[]";
                    readonly type: "string[]";
                }, {
                    readonly name: "isActive";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }];
            }];
        }, {
            readonly name: "hasMore";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isProviderActive";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "provider";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegisteredProvider";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newVersion";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "migrate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "key";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "productCapabilities";
    readonly outputs: readonly [{
        readonly name: "value";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }];
    readonly name: "productTypeProviderCount";
    readonly outputs: readonly [{
        readonly name: "count";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }];
    readonly name: "providerHasProduct";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }];
    readonly name: "providerProducts";
    readonly outputs: readonly [{
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "productData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "isActive";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "providers";
    readonly outputs: readonly [{
        readonly name: "serviceProvider";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "payee";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "description";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "isActive";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payee";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "description";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "productData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "capabilityKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "capabilityValues";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly name: "registerProvider";
    readonly outputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }];
    readonly name: "removeProduct";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "removeProvider";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "pdpOffering";
        readonly internalType: "struct ServiceProviderRegistryStorage.PDPOffering";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "serviceURL";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "minPieceSizeInBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxPieceSizeInBytes";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipniPiece";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "ipniIpfs";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "storagePricePerTibPerMonth";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minProvingPeriodInEpochs";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "location";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "paymentTokenAddress";
            readonly internalType: "contract IERC20";
            readonly type: "address";
        }];
    }, {
        readonly name: "capabilityKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "capabilityValues";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly name: "updatePDPServiceWithCapabilities";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
    }, {
        readonly name: "productData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "capabilityKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "capabilityValues";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly name: "updateProduct";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "description";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "updateProviderInfo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ContractUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
        readonly indexed: true;
    }, {
        readonly name: "serviceUrl";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "serviceProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "capabilityKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
        readonly indexed: false;
    }, {
        readonly name: "capabilityValues";
        readonly internalType: "string[]";
        readonly type: "string[]";
        readonly indexed: false;
    }];
    readonly name: "ProductAdded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
        readonly indexed: true;
    }];
    readonly name: "ProductRemoved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "productType";
        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
        readonly type: "uint8";
        readonly indexed: true;
    }, {
        readonly name: "serviceUrl";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "serviceProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "capabilityKeys";
        readonly internalType: "string[]";
        readonly type: "string[]";
        readonly indexed: false;
    }, {
        readonly name: "capabilityValues";
        readonly internalType: "string[]";
        readonly type: "string[]";
        readonly indexed: false;
    }];
    readonly name: "ProductUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "ProviderInfoUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "serviceProvider";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "payee";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "ProviderRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "providerId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "ProviderRemoved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}];
export declare const serviceProviderRegistryAddress: {
    readonly 314: "0x0000000000000000000000000000000000000000";
    readonly 314159: "0x0000000000000000000000000000000000000000";
};
export declare const serviceProviderRegistryConfig: {
    readonly address: {
        readonly 314: "0x0000000000000000000000000000000000000000";
        readonly 314159: "0x0000000000000000000000000000000000000000";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "BURN_ACTOR";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_CAPABILITIES";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_CAPABILITY_KEY_LENGTH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_CAPABILITY_VALUE_LENGTH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "REGISTRATION_FEE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }];
        readonly name: "activeProductTypeProviderCount";
        readonly outputs: readonly [{
            readonly name: "count";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "activeProviderCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "productData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "capabilityKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "capabilityValues";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly name: "addProduct";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "addressToProviderId";
        readonly outputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "decodePDPOffering";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ServiceProviderRegistryStorage.PDPOffering";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "serviceURL";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "minPieceSizeInBytes";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxPieceSizeInBytes";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "ipniPiece";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "ipniIpfs";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "storagePricePerTibPerMonth";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "minProvingPeriodInEpochs";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "location";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "paymentTokenAddress";
                readonly internalType: "contract IERC20";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pdpOffering";
            readonly internalType: "struct ServiceProviderRegistryStorage.PDPOffering";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "serviceURL";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "minPieceSizeInBytes";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxPieceSizeInBytes";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "ipniPiece";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "ipniIpfs";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "storagePricePerTibPerMonth";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "minProvingPeriodInEpochs";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "location";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "paymentTokenAddress";
                readonly internalType: "contract IERC20";
                readonly type: "address";
            }];
        }];
        readonly name: "encodePDPOffering";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "offset";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getActiveProvidersByProductType";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "struct ServiceProviderRegistryStorage.PaginatedProviders";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "providers";
                readonly internalType: "struct ServiceProviderRegistryStorage.ProviderWithProduct[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "providerId";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "providerInfo";
                    readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProviderInfo";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "serviceProvider";
                        readonly internalType: "address";
                        readonly type: "address";
                    }, {
                        readonly name: "payee";
                        readonly internalType: "address";
                        readonly type: "address";
                    }, {
                        readonly name: "name";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "description";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "isActive";
                        readonly internalType: "bool";
                        readonly type: "bool";
                    }];
                }, {
                    readonly name: "product";
                    readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProduct";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "productType";
                        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "productData";
                        readonly internalType: "bytes";
                        readonly type: "bytes";
                    }, {
                        readonly name: "capabilityKeys";
                        readonly internalType: "string[]";
                        readonly type: "string[]";
                    }, {
                        readonly name: "isActive";
                        readonly internalType: "bool";
                        readonly type: "bool";
                    }];
                }];
            }, {
                readonly name: "hasMore";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "offset";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getAllActiveProviders";
        readonly outputs: readonly [{
            readonly name: "providerIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "hasMore";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getNextProviderId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getPDPService";
        readonly outputs: readonly [{
            readonly name: "pdpOffering";
            readonly internalType: "struct ServiceProviderRegistryStorage.PDPOffering";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "serviceURL";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "minPieceSizeInBytes";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxPieceSizeInBytes";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "ipniPiece";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "ipniIpfs";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "storagePricePerTibPerMonth";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "minProvingPeriodInEpochs";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "location";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "paymentTokenAddress";
                readonly internalType: "contract IERC20";
                readonly type: "address";
            }];
        }, {
            readonly name: "capabilityKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "isActive";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }];
        readonly name: "getProduct";
        readonly outputs: readonly [{
            readonly name: "productData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "capabilityKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "isActive";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "keys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly name: "getProductCapabilities";
        readonly outputs: readonly [{
            readonly name: "exists";
            readonly internalType: "bool[]";
            readonly type: "bool[]";
        }, {
            readonly name: "values";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getProductCapability";
        readonly outputs: readonly [{
            readonly name: "exists";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "value";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getProvider";
        readonly outputs: readonly [{
            readonly name: "info";
            readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProviderInfo";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "serviceProvider";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "payee";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "description";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "isActive";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getProviderByAddress";
        readonly outputs: readonly [{
            readonly name: "info";
            readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProviderInfo";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "serviceProvider";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "payee";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "description";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "isActive";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getProviderCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getProviderIdByAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "offset";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getProvidersByProductType";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "struct ServiceProviderRegistryStorage.PaginatedProviders";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "providers";
                readonly internalType: "struct ServiceProviderRegistryStorage.ProviderWithProduct[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "providerId";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "providerInfo";
                    readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProviderInfo";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "serviceProvider";
                        readonly internalType: "address";
                        readonly type: "address";
                    }, {
                        readonly name: "payee";
                        readonly internalType: "address";
                        readonly type: "address";
                    }, {
                        readonly name: "name";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "description";
                        readonly internalType: "string";
                        readonly type: "string";
                    }, {
                        readonly name: "isActive";
                        readonly internalType: "bool";
                        readonly type: "bool";
                    }];
                }, {
                    readonly name: "product";
                    readonly internalType: "struct ServiceProviderRegistryStorage.ServiceProduct";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "productType";
                        readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
                        readonly type: "uint8";
                    }, {
                        readonly name: "productData";
                        readonly internalType: "bytes";
                        readonly type: "bytes";
                    }, {
                        readonly name: "capabilityKeys";
                        readonly internalType: "string[]";
                        readonly type: "string[]";
                    }, {
                        readonly name: "isActive";
                        readonly internalType: "bool";
                        readonly type: "bool";
                    }];
                }];
            }, {
                readonly name: "hasMore";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "isProviderActive";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "provider";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegisteredProvider";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newVersion";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "migrate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "key";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "productCapabilities";
        readonly outputs: readonly [{
            readonly name: "value";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }];
        readonly name: "productTypeProviderCount";
        readonly outputs: readonly [{
            readonly name: "count";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }];
        readonly name: "providerHasProduct";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }];
        readonly name: "providerProducts";
        readonly outputs: readonly [{
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "productData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "isActive";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "providers";
        readonly outputs: readonly [{
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "description";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "isActive";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "description";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "productData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "capabilityKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "capabilityValues";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly name: "registerProvider";
        readonly outputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }];
        readonly name: "removeProduct";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "removeProvider";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pdpOffering";
            readonly internalType: "struct ServiceProviderRegistryStorage.PDPOffering";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "serviceURL";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "minPieceSizeInBytes";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxPieceSizeInBytes";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "ipniPiece";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "ipniIpfs";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "storagePricePerTibPerMonth";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "minProvingPeriodInEpochs";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "location";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "paymentTokenAddress";
                readonly internalType: "contract IERC20";
                readonly type: "address";
            }];
        }, {
            readonly name: "capabilityKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "capabilityValues";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly name: "updatePDPServiceWithCapabilities";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
        }, {
            readonly name: "productData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "capabilityKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "capabilityValues";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly name: "updateProduct";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "description";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "updateProviderInfo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "ContractUpgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
            readonly indexed: true;
        }, {
            readonly name: "serviceUrl";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "capabilityKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
            readonly indexed: false;
        }, {
            readonly name: "capabilityValues";
            readonly internalType: "string[]";
            readonly type: "string[]";
            readonly indexed: false;
        }];
        readonly name: "ProductAdded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
            readonly indexed: true;
        }];
        readonly name: "ProductRemoved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "productType";
            readonly internalType: "enum ServiceProviderRegistryStorage.ProductType";
            readonly type: "uint8";
            readonly indexed: true;
        }, {
            readonly name: "serviceUrl";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "capabilityKeys";
            readonly internalType: "string[]";
            readonly type: "string[]";
            readonly indexed: false;
        }, {
            readonly name: "capabilityValues";
            readonly internalType: "string[]";
            readonly type: "string[]";
            readonly indexed: false;
        }];
        readonly name: "ProductUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "ProviderInfoUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "serviceProvider";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "payee";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "ProviderRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "providerId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "ProviderRemoved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }];
};
export declare const sessionKeyRegistryAbi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permission";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "authorizationExpiry";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expiry";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "permissions";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly name: "login";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "expiry";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "permissions";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly name: "loginAndFund";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permissions";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly name: "revoke";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
export declare const sessionKeyRegistryAddress: {
    readonly 314: "0x0000000000000000000000000000000000000000";
    readonly 314159: "0x0000000000000000000000000000000000000000";
};
export declare const sessionKeyRegistryConfig: {
    readonly address: {
        readonly 314: "0x0000000000000000000000000000000000000000";
        readonly 314159: "0x0000000000000000000000000000000000000000";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "permission";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "authorizationExpiry";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expiry";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "permissions";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly name: "login";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "expiry";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "permissions";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly name: "loginAndFund";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "permissions";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly name: "revoke";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
//# sourceMappingURL=gen.d.ts.map